AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Serverless application infrastructure

Parameters:

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    # e.g., "Z45J1D2QQ43H93", from the Route 53 hosted zone that will contain
    #   the domain names below.
    Default:  Z2S9JUE6PMAH1N

  CertificateDomainName:
    Type: String
    Default: "*.sacon.symphonia.io"

  RestDomainName:
    Type: String
    Default: "api.sacon.symphonia.io"

  # # Setting custom domain names on WebSocket APIs isn't
  # #  yet supported by CloudFormation, so this is all
  # #  done manually.
  WebSocketDomainName:
    Type: String
    Default: "api-ws.sacon.symphonia.io"

  ValidationDomain:
    Type: String
    Default: "symphonia.io"

Globals:

  Function:
    Runtime: nodejs8.10
    MemorySize: 256
    Timeout: 10
    Environment:
      Variables:
        REGION: !Ref AWS::Region

  Api:
    Cors: "'*'"

Resources:

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: REGIONAL
      StageName: Prod

  Health:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/health/index.js
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /health
            Method: get

  HistoryReader:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/history_reader/index.js
      Environment:
        Variables:
          MESSAGES_TABLE: !Ref MessagesTable
      Policies:
        - Statement:                                                            
          - Effect: Allow                                                     
            Action: dynamodb:Query
            Resource: !Sub "${MessagesTable.Arn}/index/*"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /history
            Method: get

  StreamReader:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/stream_reader/index.js
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          WEB_SOCKETS_ENDPOINT: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - 'arn:aws:execute-api:*:*:*/@connections/*'
      Events:
        StreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MessagesTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 100

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectRouteIntegration

  ConnectRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnect.Arn}/invocations

  OnConnect:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/on_connect/index.js
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnect
      Principal: apigateway.amazonaws.com

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectRouteIntegration

  DisconnectRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnect.Arn}/invocations

  OnDisconnect:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/on_disconnect/index.js
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnect
      Principal: apigateway.amazonaws.com
  
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: send
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendRouteIntegration

  SendRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnSend.Arn}/invocations

  OnSend:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/on_send/index.js
      Environment:
        Variables:
          MESSAGES_TABLE: !Ref MessagesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable

  OnSendPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnSend
      Principal: apigateway.amazonaws.com

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-connections"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  MessagesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-messages"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: ts
          AttributeType: N
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: ts
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: messages_by_ts
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: ts
              KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

# https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html
# https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-regional-api-custom-domain-create.html

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref CertificateDomainName
      DomainValidationOptions:
        - DomainName: !Ref CertificateDomainName
          ValidationDomain: !Ref ValidationDomain
      
  RestCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref Certificate
      DomainName: !Ref RestDomainName
      EndpointConfiguration:
        Types: [ REGIONAL ]

  RestBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ""
      DomainName: !Ref RestCustomDomain
      RestApiId: !Ref RestApi
      Stage: Prod

  WebSocketCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref WebSocketDomainName
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref Certificate
          CertificateName: !Sub "${AWS::Region} cert"

  WebSocketApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref WebSocketApi
      DomainName: !Ref WebSocketCustomDomain
      Stage: !Ref WebSocketStage

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi
  
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi

  HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties: 
      HealthCheckConfig:
        FullyQualifiedDomainName: !Sub "${RestApi}.execute-api.${AWS::Region}.amazonaws.com"
        RequestInterval: 10
        ResourcePath: /Prod/health
        Type: HTTPS
      HealthCheckTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-${AWS::Region}"

  RestDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt RestCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt RestCustomDomain.RegionalHostedZoneId
      HealthCheckId: !Ref HealthCheck
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref RestDomainName
      Region: !Ref AWS::Region
      SetIdentifier: !Sub "${AWS::Region} API"
      Type: A

#  WebSocketDnsRecord:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      HealthCheckId: !Ref HealthCheck
#      HostedZoneId: !Ref HostedZoneId
#      Name: !Ref WebSocketDomainName
#      Region: !Ref AWS::Region
#      SetIdentifier: !Sub "${AWS::Region} WS-API"
#      Type: A
#      AliasTarget:
#        DNSName: !GetAtt WebSocketCustomDomain.RegionalDomainName
#        HostedZoneId: !GetAtt WebSocketCustomDomain.RegionalHostedZoneId
